import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Upload, Eye, Copy, Plus, Trash2 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { generateUniqueUrl } from "@/lib/url-generator";
import { QuizService } from "@/services/quiz-service";
import { supabase } from "@/lib/supabase";

interface CompletionPageBuilderProps {
  onSave: (config: CompletionPageConfig) => void;
  initialConfig?: CompletionPageConfig;
  quizId?: string; // Optional quiz ID for Supabase integration
  useSupabase?: boolean; // Whether to use Supabase for saving
}

export interface CompletionPageConfig {
  title: string;
  description: string;
  buttonText: string;
  buttonURL: string;
  backgroundImage?: string;
  backgroundColor: string;
  textColor: string;
  header?: {
    enabled: boolean;
    text: string;
    fontSize: string;
  };
  subHeader?: {
    enabled: boolean;
    text: string;
    fontSize: string;
  };
  mainImage?: {
    enabled: boolean;
    url: string;
    alt: string;
  };
  additionalButtons?: Array<{
    id: string;
    text: string;
    url: string;
    style: string;
  }>;
  textElements?: Array<{
    id: string;
    type: 'paragraph' | 'heading' | 'quote';
    content: string;
    fontSize: string;
    alignment: string;
  }>;
  footer?: {
    enabled: boolean;
    text: string;
    links?: Array<{
      id: string;
      text: string;
      url: string;
    }>;
  };
}

const CompletionPageBuilder = ({ onSave, initialConfig, quizId, useSupabase = false }: CompletionPageBuilderProps) => {
  const [config, setConfig] = useState<CompletionPageConfig>(
    initialConfig || {
      title: "Thank you for completing our quiz!",
      description: "Your responses have been recorded.",
      buttonText: "Return to Home",
      buttonURL: "",
      backgroundColor: "#ffffff",
      textColor: "#000000",
      header: {
        enabled: true,
        text: "Quiz Completed",
        fontSize: "2xl",
      },
      subHeader: {
        enabled: true,
        text: "Thank you for your participation",
        fontSize: "lg",
      },
      mainImage: {
        enabled: false,
        url: "",
        alt: "Completion Image",
      },
      footer: {
        enabled: true,
        text: "2023 Quiz App",
      },
    }
  );

  const [generatedURL, setGeneratedURL] = useState<string>("");
  const { toast } = useToast();
  
  // Load completion page from Supabase if quizId is provided
  useEffect(() => {
    if (useSupabase && quizId) {
      loadCompletionPage();
    }
  }, [quizId, useSupabase]);

  const loadCompletionPage = async () => {
    if (useSupabase && quizId) {
      try {
        const completionPage = await QuizService.getCompletionPage(quizId);
        
        if (completionPage) {
          // Convert from database format to our component format
          setConfig({
            title: completionPage.title,
            description: completionPage.description || "",
            buttonText: completionPage.button_text,
            buttonURL: completionPage.button_url || "",
            backgroundColor: completionPage.background_color,
            textColor: completionPage.text_color,
            backgroundImage: completionPage.background_image || undefined,
            header: {
              enabled: completionPage.header_enabled,
              text: completionPage.header_text || "",
              fontSize: completionPage.header_font_size,
            },
            subHeader: {
              enabled: completionPage.subheader_enabled,
              text: completionPage.subheader_text || "",
              fontSize: completionPage.subheader_font_size,
            },
            mainImage: {
              enabled: completionPage.main_image_enabled,
              url: completionPage.main_image_url || "",
              alt: completionPage.main_image_alt || "Completion Image",
            },
            footer: {
              enabled: completionPage.footer_enabled,
              text: completionPage.footer_text || "",
            },
            // Add other properties as needed
          });
        }
      } catch (error) {
        console.error("Error loading completion page:", error);
        toast({
          title: "Error loading completion page",
          description: "Failed to load the completion page configuration",
          variant: "destructive",
        });
      }
    }
  };

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setConfig(prev => ({ ...prev, backgroundImage: e.target?.result as string }));
      };
      reader.readAsDataURL(file);
    }
  };

  const handleMainImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setConfig(prev => ({
          ...prev,
          mainImage: {
            ...prev.mainImage!,
            url: e.target?.result as string,
          }
        }));
      };
      reader.readAsDataURL(file);
    }
  };

  const addButton = () => {
    setConfig(prev => ({
      ...prev,
      additionalButtons: [
        ...(prev.additionalButtons || []),
        {
          id: `button-${Date.now()}`,
          text: "Button",
          url: "",
          style: "secondary",
        }
      ]
    }));
  };

  const updateButton = (id: string, field: string, value: string) => {
    setConfig(prev => ({
      ...prev,
      additionalButtons: prev.additionalButtons?.map(button => 
        button.id === id ? { ...button, [field]: value } : button
      )
    }));
  };

  const removeButton = (id: string) => {
    setConfig(prev => ({
      ...prev,
      additionalButtons: prev.additionalButtons?.filter(button => button.id !== id)
    }));
  };

  const addTextElement = (type: 'paragraph' | 'heading' | 'quote') => {
    setConfig(prev => ({
      ...prev,
      textElements: [
        ...(prev.textElements || []),
        {
          id: `text-${Date.now()}`,
          type,
          content: type === 'heading' ? 'Heading' : type === 'paragraph' ? 'Paragraph text' : 'Quote text',
          fontSize: type === 'heading' ? 'text-xl' : 'text-base',
          alignment: 'text-center',
        }
      ]
    }));
  };

  const updateTextElement = (id: string, field: string, value: string) => {
    setConfig(prev => ({
      ...prev,
      textElements: prev.textElements?.map(element => 
        element.id === id ? { ...element, [field]: value } : element
      )
    }));
  };

  const removeTextElement = (id: string) => {
    setConfig(prev => ({
      ...prev,
      textElements: prev.textElements?.filter(element => element.id !== id)
    }));
  };

  const addFooterLink = () => {
    setConfig(prev => ({
      ...prev,
      footer: {
        ...prev.footer!,
        links: [
          ...(prev.footer?.links || []),
          {
            id: `link-${Date.now()}`,
            text: "Link",
            url: "",
          }
        ]
      }
    }));
  };

  const updateFooterLink = (id: string, field: string, value: string) => {
    setConfig(prev => ({
      ...prev,
      footer: {
        ...prev.footer!,
        links: prev.footer?.links?.map(link => 
          link.id === id ? { ...link, [field]: value } : link
        )
      }
    }));
  };

  const removeFooterLink = (id: string) => {
    setConfig(prev => ({
      ...prev,
      footer: {
        ...prev.footer!,
        links: prev.footer?.links?.filter(link => link.id !== id)
      }
    }));
  };

  const generateURL = () => {
    const url = generateUniqueUrl();
    setGeneratedURL(url);
    setConfig(prev => ({ ...prev, buttonURL: url }));
    toast({
      title: "URL Generated",
      description: "A unique URL has been generated for your button",
    });
  };

  const copyURL = () => {
    navigator.clipboard.writeText(config.buttonURL);
    toast({
      title: "URL Copied",
      description: "The URL has been copied to your clipboard",
    });
  };

  const handleSave = async (event?: React.MouseEvent<HTMLButtonElement>) => {
    if (event) {
      event.preventDefault();
    }
    
    try {
      if (useSupabase && quizId) {
        // Format the config for Supabase
        const completionPageData = {
          quiz_id: quizId,
          title: config.title,
          description: config.description,
          button_text: config.buttonText,
          button_url: config.buttonURL,
          background_color: config.backgroundColor,
          text_color: config.textColor,
          background_image: config.backgroundImage || null,
          header_enabled: config.header?.enabled || false,
          header_text: config.header?.text || null,
          header_font_size: config.header?.fontSize || 'text-4xl',
          subheader_enabled: config.subHeader?.enabled || false,
          subheader_text: config.subHeader?.text || null,
          subheader_font_size: config.subHeader?.fontSize || 'text-xl',
          main_image_enabled: config.mainImage?.enabled || false,
          main_image_url: config.mainImage?.url || null,
          main_image_alt: config.mainImage?.alt || null,
          footer_enabled: config.footer?.enabled || false,
          footer_text: config.footer?.text || null,
        };
        
        await QuizService.saveCompletionPage(completionPageData);
        
        toast({
          title: "Saved to Supabase",
          description: "Your completion page configuration has been saved",
        });
      }
      
      onSave(config);
      
      toast({
        title: "Configuration Saved",
        description: "Your completion page configuration has been saved",
      });
    } catch (error) {
      console.error("Error saving completion page:", error);
      toast({
        title: "Error Saving",
        description: "Failed to save the completion page configuration",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="space-y-8">
      <Card>
        <CardHeader>
          <CardTitle>Completion Page Builder</CardTitle>
          <CardDescription>
            Customize the page that appears after a user completes the quiz
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Left Column */}
            <div className="space-y-6">
              {/* Header Section */}
              <div className="border rounded-lg p-4">
                <h3 className="font-semibold mb-4">Header Section</h3>
                <div className="space-y-4">
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id="headerEnabled"
                      checked={config.header?.enabled}
                      onChange={(e) => setConfig(prev => ({
                        ...prev,
                        header: { ...prev.header!, enabled: e.target.checked }
                      }))}
                      className="h-4 w-4"
                    />
                    <Label htmlFor="headerEnabled">Enable Header</Label>
                  </div>
                  {config.header?.enabled && (
                    <div className="space-y-4">
                      <div>
                        <Label htmlFor="headerText">Header Text</Label>
                        <Input
                          id="headerText"
                          value={config.header?.text}
                          onChange={(e) => setConfig(prev => ({
                            ...prev,
                            header: { ...prev.header!, text: e.target.value }
                          }))}
                          className="mt-2"
                        />
                      </div>
                      <div>
                        <Label htmlFor="headerFontSize">Font Size</Label>
                        <select
                          id="headerFontSize"
                          value={config.header?.fontSize}
                          onChange={(e) => setConfig(prev => ({
                            ...prev,
                            header: { ...prev.header!, fontSize: e.target.value }
                          }))}
                          className="w-full mt-2 border rounded-md p-2"
                        >
                          <option value="text-xl">Small</option>
                          <option value="text-2xl">Medium</option>
                          <option value="text-3xl">Large</option>
                          <option value="text-4xl">Extra Large</option>
                        </select>
                      </div>
                    </div>
                  )}
                </div>
              </div>

              {/* Main Content */}
              <div className="border rounded-lg p-4">
                <h3 className="font-semibold mb-4">Main Content</h3>
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="title">Title</Label>
                    <Input
                      id="title"
                      value={config.title}
                      onChange={(e) => setConfig(prev => ({ ...prev, title: e.target.value }))}
                      className="mt-2"
                    />
                  </div>
                  <div>
                    <Label htmlFor="description">Description</Label>
                    <Textarea
                      id="description"
                      value={config.description}
                      onChange={(e) => setConfig(prev => ({ ...prev, description: e.target.value }))}
                      className="mt-2"
                    />
                  </div>
                  <div>
                    <Label htmlFor="buttonText">Primary Button Text</Label>
                    <Input
                      id="buttonText"
                      value={config.buttonText}
                      onChange={(e) => setConfig(prev => ({ ...prev, buttonText: e.target.value }))}
                      className="mt-2"
                    />
                  </div>
                </div>
              </div>

              {/* Primary Button URL - New Section */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Primary Button Redirect URL</CardTitle>
                  <CardDescription>Set the destination URL where users will be redirected after completing the quiz</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="flex items-center space-x-2">
                    <Input
                      value={config.buttonURL}
                      onChange={(e) => setConfig(prev => ({ ...prev, buttonURL: e.target.value }))}
                      placeholder="Enter URL or generate one"
                      className="flex-1"
                    />
                    <Button onClick={generateURL} variant="outline">
                      Generate URL
                    </Button>
                  </div>
                  {generatedURL && (
                    <div className="mt-2 p-2 bg-muted rounded-md flex items-center justify-between">
                      <p className="text-sm break-all">{generatedURL}</p>
                      <Button onClick={copyURL} variant="ghost" size="sm" title="Copy URL">
                        <Copy className="h-4 w-4" />
                      </Button>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>

            {/* Right Column */}
            <div className="space-y-6">
              {/* Appearance */}
              <div className="border rounded-lg p-4">
                <h3 className="font-semibold mb-4">Appearance</h3>
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="backgroundColor">Background Color</Label>
                    <div className="flex items-center space-x-2 mt-2">
                      <input
                        type="color"
                        id="backgroundColor"
                        value={config.backgroundColor}
                        onChange={(e) => setConfig(prev => ({ ...prev, backgroundColor: e.target.value }))}
                        className="w-10 h-10 rounded-md border"
                      />
                      <Input
                        value={config.backgroundColor}
                        onChange={(e) => setConfig(prev => ({ ...prev, backgroundColor: e.target.value }))}
                        className="flex-1"
                      />
                    </div>
                  </div>
                  <div>
                    <Label htmlFor="textColor">Text Color</Label>
                    <div className="flex items-center space-x-2 mt-2">
                      <input
                        type="color"
                        id="textColor"
                        value={config.textColor}
                        onChange={(e) => setConfig(prev => ({ ...prev, textColor: e.target.value }))}
                        className="w-10 h-10 rounded-md border"
                      />
                      <Input
                        value={config.textColor}
                        onChange={(e) => setConfig(prev => ({ ...prev, textColor: e.target.value }))}
                        className="flex-1"
                      />
                    </div>
                  </div>
                  <div>
                    <Label htmlFor="backgroundImage">Background Image</Label>
                    <div className="mt-2">
                      <input
                        type="file"
                        id="backgroundImage"
                        accept="image/*"
                        onChange={handleImageUpload}
                        className="hidden"
                      />
                      <Button
                        type="button"
                        variant="outline"
                        onClick={() => document.getElementById('backgroundImage')?.click()}
                        className="w-full"
                      >
                        <Upload className="h-4 w-4 mr-2" />
                        Upload Background Image
                      </Button>
                    </div>
                    {config.backgroundImage && (
                      <div className="mt-2 relative">
                        <img
                          src={config.backgroundImage}
                          alt="Background Preview"
                          className="w-full h-24 object-cover rounded-md"
                        />
                        <Button
                          variant="destructive"
                          size="sm"
                          className="absolute top-1 right-1"
                          onClick={() => setConfig(prev => ({ ...prev, backgroundImage: undefined }))}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* Footer Section */}
              <div className="border rounded-lg p-4">
                <h3 className="font-semibold mb-4">Footer Section</h3>
                <div className="space-y-4">
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id="footerEnabled"
                      checked={config.footer?.enabled}
                      onChange={(e) => setConfig(prev => ({
                        ...prev,
                        footer: { ...prev.footer!, enabled: e.target.checked }
                      }))}
                      className="h-4 w-4"
                    />
                    <Label htmlFor="footerEnabled">Enable Footer</Label>
                  </div>
                  {config.footer?.enabled && (
                    <div className="space-y-4">
                      <div>
                        <Label htmlFor="footerText">Footer Text</Label>
                        <Input
                          id="footerText"
                          value={config.footer?.text}
                          onChange={(e) => setConfig(prev => ({
                            ...prev,
                            footer: { ...prev.footer!, text: e.target.value }
                          }))}
                          className="mt-2"
                        />
                      </div>
                      <div>
                        <div className="flex justify-between items-center mb-2">
                          <Label>Footer Links</Label>
                          <Button onClick={addFooterLink} size="sm" variant="outline">
                            <Plus className="h-4 w-4 mr-1" />
                            Add Link
                          </Button>
                        </div>
                        <div className="space-y-2">
                          {config.footer?.links?.map((link) => (
                            <div key={link.id} className="flex items-center space-x-2">
                              <Input
                                value={link.text}
                                onChange={(e) => updateFooterLink(link.id, 'text', e.target.value)}
                                placeholder="Link Text"
                                className="flex-1"
                              />
                              <Input
                                value={link.url}
                                onChange={(e) => updateFooterLink(link.id, 'url', e.target.value)}
                                placeholder="URL"
                                className="flex-1"
                              />
                              <Button
                                onClick={() => removeFooterLink(link.id)}
                                variant="ghost"
                                size="sm"
                              >
                                <Trash2 className="h-4 w-4" />
                              </Button>
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Preview */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Eye className="h-4 w-4 mr-2" />
            Preview
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div
            className="p-8 rounded-lg text-center space-y-6"
            style={{
              backgroundColor: config.backgroundColor,
              color: config.textColor,
              backgroundImage: config.backgroundImage ? `url(${config.backgroundImage})` : undefined,
              backgroundSize: 'cover',
              backgroundPosition: 'center',
            }}
          >
            {config.header?.enabled && (
              <h1 className={`${config.header.fontSize} font-bold`}>
                {config.header.text}
              </h1>
            )}

            {config.subHeader?.enabled && (
              <h2 className={`${config.subHeader.fontSize} font-semibold`}>
                {config.subHeader.text}
              </h2>
            )}

            {config.mainImage?.enabled && config.mainImage.url && (
              <img
                src={config.mainImage.url}
                alt={config.mainImage.alt}
                className="max-w-full h-auto mx-auto rounded-lg"
                style={{ maxHeight: '200px' }}
              />
            )}

            <h1 className="text-2xl font-bold">{config.title}</h1>
            <p className="opacity-90">{config.description}</p>

            {config.textElements?.map((element) => (
              <div key={element.id} className={element.alignment}>
                {element.type === 'heading' && (
                  <h3 className={`${element.fontSize} font-bold`}>
                    {element.content}
                  </h3>
                )}
                {element.type === 'paragraph' && (
                  <p className={element.fontSize}>
                    {element.content}
                  </p>
                )}
                {element.type === 'quote' && (
                  <blockquote className={`${element.fontSize} italic border-l-4 border-gray-400 pl-4`}>
                    "{element.content}"
                  </blockquote>
                )}
              </div>
            ))}

            <div className="space-y-3">
              <Button className="bg-gradient-to-r from-blue-600 to-green-600 hover:from-blue-700 hover:to-green-700 text-white">
                {config.buttonText}
              </Button>

              {config.additionalButtons?.map((button) => (
                <Button
                  key={button.id}
                  variant={button.style === 'primary' ? 'default' : button.style === 'secondary' ? 'secondary' : 'outline'}
                  className="ml-2"
                >
                  {button.text}
                </Button>
              ))}
            </div>

            {config.footer?.enabled && (
              <footer className="border-t pt-4 mt-8">
                <p className="text-sm opacity-75">{config.footer.text}</p>
                {config.footer.links && config.footer.links.length > 0 && (
                  <div className="flex justify-center space-x-4 mt-2">
                    {config.footer.links.map((link) => (
                      <a
                        key={link.id}
                        href={link.url}
                        className="text-sm underline opacity-75 hover:opacity-100"
                      >
                        {link.text}
                      </a>
                    ))}
                  </div>
                )}
              </footer>
            )}
          </div>
        </CardContent>
      </Card>

      <Button onClick={handleSave} className="w-full">
        Save Completion Page Configuration
      </Button>
    </div>
  );
};

export default CompletionPageBuilder;
